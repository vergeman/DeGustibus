/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ClusterEngine_H
#define ClusterEngine_H

#include <TProcessor.h>
#include "../cluster.h"
#include "cluster_types.h"

namespace ClusterEngine {

class ClusterEngineIf {
 public:
  virtual ~ClusterEngineIf() {}
  virtual void getItems(std::vector<int32_t> & _return, const std::vector<int32_t> & L, const std::vector<int32_t> & S, const int32_t C, const int32_t num_results) = 0;
  virtual void getSearch(std::vector<int32_t> & _return, const std::vector<std::string> & terms) = 0;
  Cluster myCluster;
};

class ClusterEngineNull : virtual public ClusterEngineIf {
 public:
  virtual ~ClusterEngineNull() {}
  void getItems(std::vector<int32_t> & /* _return */, const std::vector<int32_t> & /* L */, const std::vector<int32_t> & /* S */, const int32_t /* C */, const int32_t /* num_results */) {
    return;
  }
  void getSearch(std::vector<int32_t> & /* _return */, const std::vector<std::string> & /* terms */) {
    return;
  }
};

typedef struct _ClusterEngine_getItems_args__isset {
  _ClusterEngine_getItems_args__isset() : L(false), S(false), C(false), num_results(false) {}
  bool L;
  bool S;
  bool C;
  bool num_results;
} _ClusterEngine_getItems_args__isset;

class ClusterEngine_getItems_args {
 public:

  ClusterEngine_getItems_args() : C(0), num_results(0) {
  }

  virtual ~ClusterEngine_getItems_args() throw() {}

  std::vector<int32_t>  L;
  std::vector<int32_t>  S;
  int32_t C;
  int32_t num_results;

  _ClusterEngine_getItems_args__isset __isset;

  void __setL(const std::vector<int32_t> & val) {
    L = val;
  }

  void __setS(const std::vector<int32_t> & val) {
    S = val;
  }

  void __setC(const int32_t val) {
    C = val;
  }

  void __setNum_results(const int32_t val) {
    num_results = val;
  }

  bool operator == (const ClusterEngine_getItems_args & rhs) const
  {
    if (!(L == rhs.L))
      return false;
    if (!(S == rhs.S))
      return false;
    if (!(C == rhs.C))
      return false;
    if (!(num_results == rhs.num_results))
      return false;
    return true;
  }
  bool operator != (const ClusterEngine_getItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterEngine_getItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterEngine_getItems_pargs {
 public:


  virtual ~ClusterEngine_getItems_pargs() throw() {}

  const std::vector<int32_t> * L;
  const std::vector<int32_t> * S;
  const int32_t* C;
  const int32_t* num_results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterEngine_getItems_result__isset {
  _ClusterEngine_getItems_result__isset() : success(false) {}
  bool success;
} _ClusterEngine_getItems_result__isset;

class ClusterEngine_getItems_result {
 public:

  ClusterEngine_getItems_result() {
  }

  virtual ~ClusterEngine_getItems_result() throw() {}

  std::vector<int32_t>  success;

  _ClusterEngine_getItems_result__isset __isset;

  void __setSuccess(const std::vector<int32_t> & val) {
    success = val;
  }

  bool operator == (const ClusterEngine_getItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterEngine_getItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterEngine_getItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterEngine_getItems_presult__isset {
  _ClusterEngine_getItems_presult__isset() : success(false) {}
  bool success;
} _ClusterEngine_getItems_presult__isset;

class ClusterEngine_getItems_presult {
 public:


  virtual ~ClusterEngine_getItems_presult() throw() {}

  std::vector<int32_t> * success;

  _ClusterEngine_getItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusterEngine_getSearch_args__isset {
  _ClusterEngine_getSearch_args__isset() : terms(false) {}
  bool terms;
} _ClusterEngine_getSearch_args__isset;

class ClusterEngine_getSearch_args {
 public:

  ClusterEngine_getSearch_args() {
  }

  virtual ~ClusterEngine_getSearch_args() throw() {}

  std::vector<std::string>  terms;

  _ClusterEngine_getSearch_args__isset __isset;

  void __setTerms(const std::vector<std::string> & val) {
    terms = val;
  }

  bool operator == (const ClusterEngine_getSearch_args & rhs) const
  {
    if (!(terms == rhs.terms))
      return false;
    return true;
  }
  bool operator != (const ClusterEngine_getSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterEngine_getSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusterEngine_getSearch_pargs {
 public:


  virtual ~ClusterEngine_getSearch_pargs() throw() {}

  const std::vector<std::string> * terms;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterEngine_getSearch_result__isset {
  _ClusterEngine_getSearch_result__isset() : success(false) {}
  bool success;
} _ClusterEngine_getSearch_result__isset;

class ClusterEngine_getSearch_result {
 public:

  ClusterEngine_getSearch_result() {
  }

  virtual ~ClusterEngine_getSearch_result() throw() {}

  std::vector<int32_t>  success;

  _ClusterEngine_getSearch_result__isset __isset;

  void __setSuccess(const std::vector<int32_t> & val) {
    success = val;
  }

  bool operator == (const ClusterEngine_getSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusterEngine_getSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterEngine_getSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusterEngine_getSearch_presult__isset {
  _ClusterEngine_getSearch_presult__isset() : success(false) {}
  bool success;
} _ClusterEngine_getSearch_presult__isset;

class ClusterEngine_getSearch_presult {
 public:


  virtual ~ClusterEngine_getSearch_presult() throw() {}

  std::vector<int32_t> * success;

  _ClusterEngine_getSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClusterEngineClient : virtual public ClusterEngineIf {
 public:
  ClusterEngineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClusterEngineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getItems(std::vector<int32_t> & _return, const std::vector<int32_t> & L, const std::vector<int32_t> & S, const int32_t C, const int32_t num_results);
  void send_getItems(const std::vector<int32_t> & L, const std::vector<int32_t> & S, const int32_t C, const int32_t num_results);
  void recv_getItems(std::vector<int32_t> & _return);
  void getSearch(std::vector<int32_t> & _return, const std::vector<std::string> & terms);
  void send_getSearch(const std::vector<std::string> & terms);
  void recv_getSearch(std::vector<int32_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClusterEngineProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ClusterEngineIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ClusterEngineProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClusterEngineProcessor(boost::shared_ptr<ClusterEngineIf> iface) :
    iface_(iface) {
    processMap_["getItems"] = &ClusterEngineProcessor::process_getItems;
    processMap_["getSearch"] = &ClusterEngineProcessor::process_getSearch;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ClusterEngineProcessor() {}
};

class ClusterEngineMultiface : virtual public ClusterEngineIf {
 public:
  ClusterEngineMultiface(std::vector<boost::shared_ptr<ClusterEngineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClusterEngineMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClusterEngineIf> > ifaces_;
  ClusterEngineMultiface() {}
  void add(boost::shared_ptr<ClusterEngineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getItems(std::vector<int32_t> & _return, const std::vector<int32_t> & L, const std::vector<int32_t> & S, const int32_t C, const int32_t num_results) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getItems(_return, L, S, C, num_results);
        return;
      } else {
        ifaces_[i]->getItems(_return, L, S, C, num_results);
      }
    }
  }

  void getSearch(std::vector<int32_t> & _return, const std::vector<std::string> & terms) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getSearch(_return, terms);
        return;
      } else {
        ifaces_[i]->getSearch(_return, terms);
      }
    }
  }

};

} // namespace

#endif
